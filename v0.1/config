# DataCollect section is related in Framework.
# such as data collect buf size or data transfer period
[DataCollect]
client_buf_size = 
transfer_period =
collect_port = 

# ML_Process sections apply to trainer and predictor.
# It can use more than one algorithm.
# Each algorithm might be needed different data for training.
[ML_Process]
model_num = 3
model_names = model1, model2
window_size = 10

# Each algorithm has different parameters.
# Each section contains the data transform functions that will 
# work before the algorithm is executed.
[model1]
param1 = 1
param2 = parapara
param3 = qqqqq

[model2]
arg1 = 30
arg2 = arg2
arg3 = Aargrrgrg3

[CNN]
NR_Layer = 4 
# ...


[ANN]
NR_Layer = 2
# ...

[Kmeans]
cluster_num = 5
# ...


# In operations section, enter the operation sequence.
# Types of operations include data(D), model training(T), model running(R),
# data transformation(M), output_path(O).
#
# In the "ML_PROCESS SECTION" above, you can define the order of
# model learning operations in the order of the input models.
# if Model_names = model1, model2,
# The first_model entry defines the order of operations for model1, and
# the second_model entry defines the order of operations for model2.
# The steps of each operation are separated by ','.
#
# Below is an example of writing the operation sequence.
#
# first_model = D:"data_path1", M:"1col_del"A:"2", T:"ANN", M:"transpose", O:"output_path1"
# second_model = D:"data_path2", R:"first_model", M:"transpose", T:"CNN"
#
# The above example defines a sequence of operations that
# learns two models to create a predictive model.
# For data transform functions, the arguments can be multiple,
# such as A:"arg1" A:"arg2".
#
# Option "O" is the path where the learned model is saved.
# If not set, it will be saved in the default path.
#
# All elements must be enclosed in double quotes.
# (Data path, model name, data transformation function and arguments, etc.)

[predict_operations]
# predict data source can be pipe...
predict_operations = D:"predict_data", M:"deduplicates"A:"1"A:"2", R:"model1.run", F:"1col_del", R:"model2.run"

[train_operations]
first_model = D:"train_data", T:"CNN", M:"transpose", O:"output_path"
second_model = D:"train_data", M:"deduplicates"A:"1"A:"3", T:"CNN", M:"transpose"
third_model =
fourth_model =
