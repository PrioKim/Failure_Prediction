# DataCollect section is related in Framework.
# such as data collect buf size or data transfer period
[DataCollect]
client_buf_size = 
transfer_period =
collect_port = 

# ML_Process sections apply to trainer and predictor.
# It can use more than one algorithm.
# model_name must be model class name
[ML_Process]
model_num = 3
model_names = model1, model2, model1
window_size = 10

# Each algorithm has different parameters.
# Each section contains the data transform functions that will 
# work before the algorithm is executed.
# Each session defines parameters for the models to be run.
# The model name is either the name of the model supported
# by the framework or the name of the model you have implemented.
# At this time, the name of the model must be the same as
# the class name of the implemented model.
#
# The parameters may vary depending on the model.
# At the bottom of this sections there are the default parameter
# settings for each model. You must use or modify it.
#
# Each session refers to the order that will be used to learn
# and run the models that will work in the framework.
# If you are using two models, set the enable entry
# in the FIRST_MODEL and SECOND_MODEL sections to true
# and set the rest to false.

[FIRST_MODEL]
enable = true
model_name = model1
param1 = 1
param2 = parapara
param3 = qqqqq

[SECOND_MODEL]
enable = true
model_name = model2
arg1 = 30
arg2 = arg2
arg3 = Aargrrgrg3

[THIRD_MODEL]
enable = true
model_name = model1
param1 = 122
param2 = parazz
param3 = 2222

[FOURTH_MODEL]
enable = false
model_name =
arg1 =
arg2 =

# Below are the default parameters for the models supported by the framework.
# [Xth_MODEL]
# enable = true
# model_name = model1
# param1 = 1
# param2 = parapara
# param3 = qqqqq
#
# [Xth_MODEL]
# enable = true
# model_name = model2
# arg1 = 30
# arg2 = arg2
# arg3 = Aargrrgrg3





# In operations section, enter the operation sequence.
# Types of operations include data(D), model training(T), model running(R),
# data transformation(M), output_path(O).
#
# In the "ML_PROCESS SECTION" above, you can define the order of
# model learning operations in the order of the input models.
# if Model_names = model1, model2,
# The first_model entry defines the order of operations for model1, and
# the second_model entry defines the order of operations for model2.
# The steps of each operation are separated by ','.
#
# Below is an example of writing the operation sequence.
#
# first_model = D:"data_path1", M:"1col_del":"2", T:"ANN", M:"transpose", O:"output_path1"
# second_model = D:"data_path2", R:"first_model", M:"transpose", T:"CNN"
#
# The above example defines a sequence of operations that
# learns two models to create a predictive model.
# For data transform functions, the arguments can be multiple,
# such as :"arg1":"arg2".
#
# Option "O" is the path where the learned model is saved.
# If not set, it will be saved in the default path.
#
# All elements must be enclosed in double quotes.
# (Data path, model name, data transformation function and arguments, etc.)

[predict_operations]
# predict data source can be pipe...
predict_operations = D:"predict_data", M:"deduplicates":"1":"2", R:"first_model", M:"1col_del", R:"second_model"

[train_operations]
first_model = D:"train_data", T:"CNN", M:"transpose", O:"output_path"
second_model = D:"train_data", M:"deduplicates":"1":"3", R:"first_model", T:"CNN", M:"transpose"
third_model =
fourth_model =


